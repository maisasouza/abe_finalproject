swagger: '2.0'
info:
  version: '1.0.0'
  title: Atacadista
  description: API disponibilizada pelo Atacadista
host: abeproject.com
basePath: /atacadista
schemes:
  - https

consumes:
  - application/json
produces:
  - application/json
paths:
  /pedido:
    post:
      summary: "Cria-se uma solicitação de pedido."
      tags:
        - pedido
        - orcamento
      parameters:
        - name: pedidoDTO
          in: body
          schema:
            type: array
            items: string #mudar para solicitacaoDTO
          required: true
      responses: 
        '200':
          description: 'ok.'
          schema:
            type: string #mudar para OrcamentoDTO





#   /configuracao:
#     get:
#       summary: Retorna objeto configuração completo que esteja ativo do sistema.
#       description: "Método utilizado em vários momentos para recuperação das informações de configurações gerais como Termo de Eleição e prazos de alerta. 
#                     Pressupõe que exista apenas um registro ativo no sistema, este será o objeto a ser retornado. Caso não exista um objeto vazio será retornado."
#       tags:
#         - configuracoes
#       responses:
#         '200':
#           description: A resposta sempre será 200. Caso não exista um objeto no BD a ser retornado será retornado um objeto vazio.
#           schema:
#             $ref: "#/definitions/Configuracoes"
#     patch:
#       summary: Cria uma nova instância Ativa de configuracão, com atributos do objeto atualizados.
#       description: "Método utilizado para alterar as configurações do sistema. Como a exclusão se dá de maneira lógica. Uma nova instância é criada, de status ativa e com seus atributos atualizados.
#         Este método é utilizado em dois momentos: salvar termos de Eleicao e salvar Configurações de Caixa Postal"
#       tags:
#         - configuracoes
#       parameters:
#         - name: patchValues
#           description: "Um Map<String, Object>, contendo os atributos que serão alterados e os respectivos valores. Método utilizado apenas em casos de uso da parte Administrativa do sistema."
#           in: body
#           required: true
#           schema: 
#             type: string
#             enum: [termoEleicaoPF, termoEleicaoPJ, prazoNotificacao, prazoAlertaVencimento]
#       responses:
#         '200':
#           description: Ok. O novo objeto configuração atualizado é retornado na resposta.
#           schema:
#             $ref: "#/definitions/Configuracoes"
#   /tiposMensagem:
#     get:
#       summary: Retorna uma lista de Tipos de Mensagem ativos do sistema.
#       description: "Metodo utilizado nos CDUS: Administração (CRUD tipos mensagem) e no CDU Nova Mensagem"
#       tags:
#         - tipos Mensagem
#       responses:
#         '200':
#             description: ok
#             schema:
#               type: array
#               items:
#                 $ref: "#/definitions/TipoMensagem"
#     post:
#       summary: Inserção/Atualização/Remoção(lógica) dos tipos de Mensagem existentes no sistema.
#       description: "O método recebe sempre uma lista de objetos 'TipoMensagem' completos e os persiste da forma que eles vieram. 
#         O unico tratamento no servidor é o de log de usuário de atualização e inclusão e a data dessas operações. Método utilizado apenas do CDU Administracao (CRUD Tipos Mensagem)"
#       tags:
#         - tipos Mensagem
#       parameters:
#         - name: listTipoMsg
#           in: body
#           required: true
#           description: Como a remoção é lógica, há simplesmente a persistência dessa lista
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/TipoMensagem"
#       responses:
#         '200':
#           description: ok. Retona a lista dos que foram persistidos com os objetos atualizados
#           schema:
#             type: array
#             items: 
#               $ref: "#/definitions/TipoMensagem"
#   /credenciamento/validar:
#     get:
#       summary: Avalia a situação de credenciamento do usuário, caso ele tenha feito parte do processo. (possivel refatoracao no retorno do metodo, redundancia com o metodo getCredenciamentoUsuario)
#       description: O credenciamento no sistema se dá em partes, caso o usuario não tenha feito nada o método retorna 0. <br> 
#                  Caso o usuario já tenha aceitado o Termo de Eleição mas não finalizou a parte de frequência o método retorna 1. <br>
#                  Por fim retorna 2 quando o usuário já realizou todo o processo de credenciamento
#       tags:
#         - credenciamento
#       responses:
#         '200':
#           description: ok
#   /credenciamento/aceitarTermo:
#     post:
#       summary: Método que realiza todo o processo de Credenciamento quando o usuário aceita o Termo de Eleição.
#       tags:
#         - credenciamento
#       responses:
#         '200':
#           description: ok
#   /credenciamento/aceitarConfiguracaoAlertas:
#     post:
#       summary: Método que realiza a segunda fase do credenciamento e salva as configurações de alerta escolhidas pelo usuário.
#       description: Ao final desse método é atribuido a ROLE_CRED_DECORT ao usuário. De forma que no próximo acesso ao Decort ele já estará autorizado a acessar
#                   diretamente a caixa postal.
#       tags:
#         - credenciamento
#       responses:
#         '200':
#           description: ok
#   /credenciamento/getCredenciamentoUsuario:
#     get:
#       summary: Método que retorna o status de Credenciamento de determinado usuário
#       tags:
#         - credenciamento
#       responses:
#         '200':
#           description: ok
#   /credenciamento/descredenciar:
#     post:
#       summary: Realiza os passos necessários para o descredenciamento de determinado usuário do sistema. (possivel refatoracao de controller - ele se encontra no ConsultaCredenciamentoController)
#       description: Método considera apenas pessoas de status Credenciadas. Ou seja, não é incluído aqui usuários servidores. <br>
#                    ROLEs acesso - 'ROLE_DESCREDENCIAR'
#       tags:
#         - credenciamento
#       responses:
#         '200':
#           description: ok
#   /consultaCredenciamento/consultarSituacaoCredenciamento:
#     post:
#       summary: Realiza consulta da situacao de credenciamento de determinado usuário. (possivel refatoracao com funcoes ja criadas, post ?)
#       tags:
#         - consulta credenciamento
#       responses:
#         '200':
#           description: ok
#           schema:
#             $ref: "#/definitions/SituacaoCredenciamentoDTO"
#   /consultaCredenciamento/consultarHistoricoSituacaoCredenciamento:
#     post:
#       summary: Retorna uma lista de Situacoes de Credenciamento - que corresponde a lista histórico do usuário
#       tags:
#         - consulta credenciamento
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: array
#             items: 
#               $ref: "#/definitions/SituacaoCredenciamentoDTO"
#   /consultaCredenciamento/getPessoasFisicasJuridicasCadastradas:
#     post:
#       summary: Retorna uma lista de pessoas (PF e PJ apenas) que de alguma forma já foram inseridas no banco Decort
#       tags:
#         - consulta credenciamento
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/PessoaDTO"
#   /consultaCredenciamento/getPessoasFisicasJuridicasCredenciadas:
#     post:
#       summary: Retorna uma lista de pessoas (PF e PJ apenas) que possuem o status CREDENCIADO.
#       tags:
#         - consulta credenciamento
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/PessoaDTO"
#   /consultaCredenciamento/downloadTermoEleicao/{username}:
#     get:
#       summary: Retorna o termo de eleição vigente de um usuário específico.
#       tags:
#         - consulta credenciamento
#       parameters:
#         - name: username
#           in: path
#           description: username do usuário selecionado.
#           type: string
#           required: true
#       produces:
#         - application/pdf
#       responses:
#         '200':
#           description: "arquivo PDF: username.pdf"
#           schema:
#             type: file
#         '403':
#           description: acesso proibido
#   /consultaCredenciamento/downloadDocumentoHistorico/{username}/{historico}:
#     get:
#       summary: Retorna arquivo do termo de eleição de determinado histórico de um usuário específico.
#       description: Assume-se neste método que só existe um documento associado a um histórico e por isso só se retorna um único arquivo
#       tags:
#         - consulta credenciamento
#       parameters:
#         - name: username
#           in: path
#           description: username do usuário selecionado.
#           type: string
#           required: true
#         - name: historico
#           in: path
#           description: id do histórico do usuario.
#           type: integer
#           required: true
#       produces:
#         - application/pdf
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: file

#   /caixa_postal/getMensagem:
#     post:
#       summary: Retorna uma lista de Mensagens com base nos filtros e na visão do usuário.
#       tags:
#         - caixa postal
#         - mensagem
#       responses:
#         '200':
#           description: ok
#           schema:
#             $ref: "#/definitions/CaixaPostalDTO"
#   /mensagem/anexo/{idAnexo}:
#     get:
#       summary: Retorna um arquivo anexado a uma determinada mensagem
#       tags:
#         - mensagem
#       parameters:
#         - name: idAnexo
#           in: path
#           description: id do Anexo a ser baixado
#           type: integer
#           required: true
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: file
#         '403':
#           description: acesso proibido
#   /mensagem/{idMensagem}/xml:
#     get:
#       summary: Retorna o arquivo xml da mensagem
#       tags:
#         - mensagem
#       parameters:
#         - name: idMensagem
#           in: path
#           description: id da Mensagem
#           type: integer
#           required: true
#       produces:
#         - application/xml
#       responses:
#         '200': 
#           description: ok
#           schema:
#             type: file
#         '403':
#           description: acesso proibido
#   /mensagem/nova:
#     post:
#       summary: Cria uma nova mensagem
#       tags:
#         - mensagem
#       parameters:
#         - name: dto
#           in: body
#           description: Objeto mensagem a ser criado
#           schema:
#             $ref: "#/definitions/NovaMensagemDTO"
#       responses:
#         '200':
#           description: ok
#         '400':
#           description: erros de validação
#           schema:
#             $ref: "#/definitions/ValidationErrorDTO"
#   /mensagem/{id}:
#     parameters:
#         - name: id
#           in: path
#           description: id da Mensagem
#           type: string
#           required: true
#     get:
#       summary: Recupera a mensagem de id especificado.
#       tags:
#         - mensagem
#       responses:
#         '200':
#           description: ok. referenciei a MensagemDTO, mas na verdade ele está retornando o obj Mensagem direto como vem pelo Hibernate
#           schema:
#             $ref: "#/definitions/MensagemDTO"
#         '400':
#           description: problema de validação
#           schema:
#             $ref: "#/definitions/ValidationErrorDTO"
#     patch:
#       summary: Atualiza a mensagem de id especificado.
#       description: Atualmente o único campo que é atualizado é o campo de situação da mensagem
#       tags:
#         - mensagem
#       responses:
#         '200':
#           description: ok
#         '400':
#           description: problema de validação
#           schema:
#             $ref: "#/definitions/ValidationErrorDTO"
#     delete:
#       tags:
#         - mensagem
#       responses:
#         '200':
#           description: ok
#         '400':
#           description: problema de validação
#           schema:
#             $ref: "#/definitions/ValidationErrorDTO"
#   /contatos:
#     get:
#       summary: Recupera os contatos do usuario logado.
#       description: O tratamento do tipo de contato deve ser feito no cliente.
#       tags:
#         - contato
#       responses:
#         '200':
#           description: ok. Retornando a lista de contatos do usuario logado. Caso não exista ninguem retorna vazio.
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/ContatoPessoa"
#     post:
#       summary: Salva um contato. E retorna o objeto atualizado.
#       tags:
#         - contato
#       parameters:
#         - name: listaContatos
#           in: body
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/ContatoPessoa"
#           required: true
#       responses:
#         '200':
#           description: ok. Retorna o objeto criado, atualizado. 
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/ContatoPessoa"
#   /contatos/remover:
#     post:
#       summary: Remove uma lista de contatos (lista de ids).
#       tags:
#         - contato
#       parameters:
#         - name: listaContatosId
#           in: body
#           description: Lista de Ids dos contatos a serem removidos.
#           schema:
#             type: array
#             items:
#               type: integer
#           required: true
#       responses:
#         '200':
#           description: ok
#   /procuracao/menu:
#     get:
#       summary: Recupera o Menu de maneira dinâmica para o perfil procurador
#       tags:
#         - menu
#       responses:
#         '200':
#           description: ok
#           schema:
#             $ref: "#/definitions/MenuDTO"
#   /enumaration/situacaoCredenciamento:
#     get:
#       summary: Recupera todos os enums de Situacao de Credenciamento
#       tags:
#         - enum
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/EnumDTO"
#   /enumeration/meioContatoTelefone:
#     get:
#       summary: Recupera todos os meios de contato de telefone
#       tags:
#         - enum
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/EnumDTO"
#   /enumeration/meioContatoEmail:
#     get:
#       summary: Recupera todos os meios de contato de Email (Refatorar, nao existe mais tipos de email)
#       tags:
#         - enum
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/EnumDTO"
#   /enumeration/situacaoMensagem:
#     get:
#       summary: Recupera todos os enums para a Situação da Mensagem.
#       tags:
#         - enum
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: array
#             items:
#               $ref: "#/definitions/EnumDTO"
#   /login:
#     get:
#       summary: Método que redireciona para o CAS para a realização de login;
#       tags:
#         - autenticação
#       responses:
#         '200':
#           description: ok
#   /selecionar_empresa:
#     post:
#       summary: Altera as permissoes de usuario com base na seleção de uma determinada empresa.
#       description: Não está sendo utilizada no Decort. Porque esta lógica de programação não faz sentido no decort
#       deprecated: true
#       tags:
#         - autenticação
#       responses:
#         '200':
#           description: ok
#   /authetication_info:
#     get:
#       summary: "Retorna um objeto filho da classe BaseUsuarioLogadoDTO, com as informações principais de autenticação do usuário: roles, procuracoes, nome, username etc"
#       tags:
#         - autenticação
#       responses:
#         '200':
#           description: ok
#   /propriedades/versao:
#     get:
#       summary: Retorna a versão do sistema.
#       description: Retorna o valor da versão que está contido no pom.xml do projeto
#       tags:
#         - aplicação
#       responses:
#         '200':
#           description: ok. Retorna string da versao
#           schema:
#             type: string
#   /propriedades/ambiente:
#     get:
#       summary: Retorna o nome do ambiente em que o sistema foi acionado
#       tags:
#         - aplicação
#       responses:
#         '200':
#           description: ok
#           schema:
#             type: string
#             enum: [local, desenvolvimento, homologação, produção]
# definitions:
#   SituacaoCredenciamentoDTO:
#     type: object
#     properties:
#       idHistorico:
#         type: integer
#       username:
#         type: string
#       contribuinte:
#         type: string 
#         description: nao sei o que é esse campo
#       situacaoCredenciamentoEnum:
#         type: string
#       data:
#         type: string
#         format: date
#       nomeResponsavel:
#         type: string
#   PessoaDTO:
#     type: object
#     properties:
#       username:
#         type: string
#       nome:
#         type: string
#       situacaoAtual:
#         type: string
#   PessoaCPDTO:
#     type: object
#     properties:
#       username:
#         type: string
#       tipoPessoa:
#         description: "Tipo Documento: PF, PJ ou BM"
#         type: string
#       nome:
#         type: string
#   CaixaPostalDTO:
#     type: object
#     properties:
#       lista:
#         type: array
#         items:
#           $ref: "#/definitions/MensagemDTO"
#       total:
#         type: number
#         format: long
#       totalNaoLido:
#         type: number
#         format: long
#       totalFiltrado:
#         type: number
#         format: long
#   MensagemDTO:
#     type: object
#     properties:
#       id:
#         type: integer
#       assunto:
#         type: string
#       exigeCertificado:
#         type: boolean
#       dataAgendamento:
#         type: string
#         format: date
#       usuarioInclusao:
#         $ref: "#/definitions/PessoaCPDTO"
#       dataRealizacaoEnvio:
#         type: string
#         format: date
#       situacao:
#         type: string
#       destinatarios:
#         type: array
#         items:
#           $ref: "#/definitions/DestinatarioMensagemDTO"
#       temAnexo:
#         type: boolean
#   NovaMensagemDTO:
#     type: object
#     properties:
#       tipo:
#         type: number
#         format: long
#       assunto:
#         type: string
#       corpo:
#         type: string
#       exigeCertificado:
#         type: boolean
#       enviarAgora:
#         type: boolean
#       dataAgendamento:
#         type: string
#         format: date
#       destinatarios:
#         type: array
#         items: 
#           type: string
#       destino:
#         type: string
#   DestinatarioMensagemDTO:
#     type: object
#     properties:
#       destinatario:
#          $ref: "#/definitions/PessoaCPDTO"
#       dataNotificacao:
#         type: string
#         format: date
#       dataLeituraUsuario:
#         type: string
#         format: date
#       diasParaNotificacao:
#         type: integer
#       isNotificacaoTacita:
#         type: boolean
#   ContatoPessoa:
#     type: object
#     properties:
#       id:
#         type: number
#         format: long
#       meioContato:
#         type: string
#         enum: [email, telefone fixo, telefone celular]
#       usuario:
#         description: coloquei string, mas é retornado o objeto Pessoa direto do Hibernate
#         type: string
#       dataAtualizacao:
#         type: string
#         format: date
#       contato:
#         type: string
#       principal:
#         description: apesar de mapeado este campo não esta sendo utilizado
#         type: boolean
#   MenuDTO:
#     type: object
#     properties:
#       totalNaoLido:
#         type: integer
#       usuarioCp:
#         $ref: "#/definitions/EmpresaDTO"
#       empresasAcessadas:
#         type: array
#         items:
#           $ref: "#/definitions/EmpresaDTO"
#       termosAceite:
#         type: array
#         items:
#           $ref: "#/definitions/EmpresaDTO"
#   EmpresaDTO:
#     type: object
#     properties:
#       empresa:
#         description: coloquei o campo como string mas o campo é do tipo Pessoa
#         type: string
#       totalNaoLido:
#         type: integer
#       totalAcesso:
#         type: integer
#       razaoSocial:
#         type: string
#   EnumDTO:
#     type: object
#     properties:
#       chave:
#         type: string
#       descricao:
#         type: string
#       codigo:
#         type: integer
#   Configuracoes:
#     type: object
#     properties:
#       id:
#         type: integer
#       dataInclusao:
#         type: string
#         format: date
#       usuarioInclusao:
#         type: string
#       ativo:
#         type: boolean
#       prazoNotificacao:
#         type: integer
#       prazoAlertaVencimento:
#         type: integer
#       termoEleicaoPF:
#         type: string
#       termoEleicaoPJ:
#         type: string
#   TipoMensagem:
#     type: object
#     properties:
#       id:
#         type: integer
#       descricao:
#         type: string
#       templateAssunto:
#         type: string
#       templateCorpo:
#         type: string
#       ativo:
#         type: boolean
#       exigeCertificadoDigital:
#         type: boolean
#       exigeAnexo:
#         type: boolean
#       usuarioInclusao:
#         type: string
#       usuarioAtualizacao:
#         type: string
#       dataInclusao:
#         type: string
#         format: date
#       dataAtualizacao:
#         type: string
#         format: date
#       justificativa:
#         type: string
#   ValidationErrorDTO:
#     type: object
#     properties:
#       fieldErrors:
#         type: array
#         items:
#           type: string
#       panelTitle:
#         type: string
#       errorsSize:
#         type: integer
